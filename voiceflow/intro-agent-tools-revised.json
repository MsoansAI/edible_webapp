{
  "intro_agent_tools_revised": [
    {
      "name": "checkCustomerContext",
      "description": "Intelligently gather customer context based on available identifiers",
      "type": "conditional_composite",
      "logic": {
        "step_1": {
          "name": "determine_identifiers",
          "type": "javascript",
          "code": "const has_user_id = user_id && user_id !== ''; const has_phone = phone_number && phone_number !== ''; const has_email = email && email !== ''; const should_get_customer_profile = has_user_id || has_phone || has_email; const is_authenticated = has_user_id;"
        },
        "step_2": {
          "name": "conditional_customer_lookup", 
          "type": "conditional_api",
          "condition": "should_get_customer_profile === true",
          "if_true": {
            "method": "POST",
            "url": "{{SUPABASE_URL}}/functions/v1/customer-management",
            "headers": {
              "Content-Type": "application/json",
              "Authorization": "Bearer {{SUPABASE_ANON_KEY}}"
            },
            "body": {
              "phone": "{{phone_number}}",
              "email": "{{email}}",
              "authUserId": "{{user_id}}",
              "source": "intro-agent"
            }
          },
          "if_false": {
            "set_defaults": {
              "customer_id": null,
              "customer_name": "there",
              "is_authenticated": false,
              "order_count": 0,
              "recent_order": null,
              "customer_profile_summary": "Anonymous user - no customer lookup needed"
            }
          }
        },
        "step_3": {
          "name": "cart_status_check",
          "type": "api",
          "method": "POST",
          "url": "{{SUPABASE_URL}}/functions/v1/cart-manager",
          "headers": {
            "Content-Type": "application/json",
            "Authorization": "Bearer {{SUPABASE_ANON_KEY}}"
          },
          "body": {
            "action": "summary",
            "userId": "{{user_id}}",
            "sessionId": "{{session_id}}"
          }
        }
      },
      "response_mapping": {
        "from_customer_management": {
          "customer_id": "response.customer._internalId",
          "customer_name": "response.customer.firstName || 'there'",
          "is_authenticated": "response.customer.isNewAccount === false",
          "order_count": "response.orderHistory ? response.orderHistory.length : 0",
          "recent_order": "response.orderHistory && response.orderHistory.length > 0 ? response.orderHistory[0] : null"
        },
        "from_cart_manager": {
          "has_cart_items": "response.summary.itemCount > 0",
          "cart_item_count": "response.summary.itemCount",
          "cart_total": "response.summary.total",
          "cart_items": "response.summary.items"
        }
      }
    },
    {
      "name": "generateGreeting",
      "description": "Generate personalized greeting based on customer context",
      "type": "javascript_function",
      "parameters": {
        "is_authenticated": "boolean",
        "customer_name": "string", 
        "has_cart_items": "boolean",
        "cart_item_count": "number",
        "cart_total": "number",
        "recent_order": "object",
        "order_count": "number"
      },
      "code": `
        let greeting = "";
        
        if (!is_authenticated) {
          if (has_cart_items) {
            greeting = \`Hi there! Welcome to Edible Arrangements! I notice you have \${cart_item_count} item\${cart_item_count > 1 ? 's' : ''} in your cart worth $\${cart_total}. Would you like some help completing your order, or is there something else I can assist you with today?\`;
          } else {
            greeting = "Hi there! Welcome to Edible Arrangements! I'm here to help you with whatever you need today. Are you looking to place an order, or do you have questions about our products?";
          }
        } else {
          if (has_cart_items) {
            greeting = \`Welcome back, \${customer_name}! I notice you have \${cart_item_count} item\${cart_item_count > 1 ? 's' : ''} in your cart worth $\${cart_total}. Would you like some help completing your order, or is there something else I can assist you with today?\`;
          } else if (recent_order && recent_order.status !== "delivered") {
            greeting = \`Hello \${customer_name}! I see you recently placed order \${recent_order.orderNumber} for $\${recent_order.total}. It's currently \${recent_order.status}. Are you checking on this order, or is there something new I can help you with?\`;
          } else {
            greeting = \`Welcome back, \${customer_name}! Great to see you again. I see you've ordered with us \${order_count} time\${order_count > 1 ? 's' : ''} before - thanks for being such a valued customer! What can I help you with today?\`;
          }
        }
        
        return greeting;
      `
    },
    {
      "name": "routeToAgent",
      "description": "Route customer to appropriate specialized agent with context",
      "type": "routing_function",
      "parameters": {
        "last_message": "string",
        "has_cart_items": "boolean",
        "customer_context": "object"
      },
      "routing_logic": `
        let routing_decision = "";
        let handoff_message = "";
        
        const message_lower = last_message.toLowerCase();
        
        // Check for explicit order management intent
        if (message_lower.includes("order") && 
            (message_lower.includes("track") || 
             message_lower.includes("modify") ||
             message_lower.includes("cancel") ||
             message_lower.includes("status"))) {
          routing_decision = "order-management";
          handoff_message = "I understand you need help with your existing order. Let me connect you with our order management team.";
        }
        // Check for ordering intent
        else if (has_cart_items || 
                 message_lower.includes("order") ||
                 message_lower.includes("birthday") ||
                 message_lower.includes("anniversary") ||
                 message_lower.includes("buy") ||
                 message_lower.includes("purchase")) {
          routing_decision = "ordering";
          handoff_message = has_cart_items 
            ? "Perfect! Let me connect you with our ordering specialist who can help you complete your purchase."
            : "Great! Let me connect you with our ordering specialist who can help you find the perfect arrangement.";
        }
        // Stay with intro agent for general questions
        else {
          routing_decision = "intro-support";
          handoff_message = "I'd be happy to help you with that!";
        }
        
        return { routing_decision, handoff_message };
      `,
      "routing_targets": {
        "ordering": "ordering_agent_flow",
        "order-management": "order_management_flow",
        "intro-support": "current_flow"
      }
    },
    {
      "name": "getProductInfo",
      "description": "Get general product information for customer questions (intro agent support)",
      "type": "api",
      "endpoint": {
        "method": "POST",
        "url": "{{SUPABASE_URL}}/functions/v1/product-search",
        "headers": {
          "Content-Type": "application/json",
          "Authorization": "Bearer {{SUPABASE_ANON_KEY}}"
        }
      },
      "parameters": {
        "query": {
          "type": "string",
          "description": "Customer's product question or search term",
          "required": true
        },
        "limit": {
          "type": "integer",
          "default": 3,
          "description": "Number of products to return"
        },
        "informationOnly": {
          "type": "boolean",
          "default": true,
          "description": "Return product info without purchase intent"
        }
      }
    },
    {
      "name": "findNearestStore",
      "description": "Find store location based on customer ZIP code",
      "type": "api",
      "endpoint": {
        "method": "GET",
        "url": "{{SUPABASE_URL}}/functions/v1/franchisee-inventory/find-nearest",
        "headers": {
          "Authorization": "Bearer {{SUPABASE_ANON_KEY}}"
        }
      },
      "parameters": {
        "zipCode": {
          "type": "string",
          "required": true,
          "description": "Customer's ZIP code"
        }
      }
    }
  ],
  "user_scenarios": {
    "truly_anonymous": {
      "description": "User with only sessionId, no other identifiers",
      "input": {
        "user_id": null,
        "session_id": "session_123",
        "phone_number": null,
        "email": null
      },
      "expected_flow": {
        "customer_lookup": false,
        "cart_lookup": true,
        "greeting_type": "generic_welcome",
        "context_available": "cart_only"
      }
    },
    "anonymous_with_phone": {
      "description": "Anonymous user who provided phone number",
      "input": {
        "user_id": null,
        "session_id": "session_123", 
        "phone_number": "+1234567890",
        "email": null
      },
      "expected_flow": {
        "customer_lookup": true,
        "cart_lookup": true,
        "greeting_type": "personalized_if_found",
        "context_available": "customer_and_cart"
      }
    },
    "authenticated_user": {
      "description": "Logged in user with full profile",
      "input": {
        "user_id": "user_123",
        "session_id": "session_123",
        "phone_number": "+1234567890",
        "email": "user@example.com"
      },
      "expected_flow": {
        "customer_lookup": true,
        "cart_lookup": true,
        "greeting_type": "fully_personalized",
        "context_available": "complete_profile"
      }
    },
    "anonymous_with_cart": {
      "description": "Anonymous user with items in cart",
      "input": {
        "user_id": null,
        "session_id": "session_123",
        "phone_number": null,
        "email": null
      },
      "cart_contents": {
        "itemCount": 2,
        "total": 89.98
      },
      "expected_flow": {
        "customer_lookup": false,
        "cart_lookup": true,
        "greeting_type": "cart_focused",
        "routing_preference": "ordering_agent"
      }
    }
  },
  "performance_benefits": {
    "reduced_api_calls": "Skip customer-management for truly anonymous users",
    "faster_response_time": "Conditional logic prevents unnecessary database lookups",
    "cleaner_data": "Don't create fake customer records for anonymous sessions",
    "better_ux": "Appropriate greetings based on actual customer status"
  },
  "implementation_notes": {
    "voiceflow_setup": "Use conditional API steps based on identifier availability",
    "variable_flow": "Set defaults for anonymous users, API responses for identified users", 
    "error_handling": "Graceful fallback to anonymous flow if customer lookup fails",
    "cart_handling": "Always check cart status regardless of authentication"
  }
} 